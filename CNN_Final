{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":505},"executionInfo":{"elapsed":5368,"status":"ok","timestamp":1676375372803,"user":{"displayName":"Shujaat Ali Shariati","userId":"00539791853302699711"},"user_tz":-300},"id":"4Sxz9lnSjcPj","outputId":"886a6db7-1caf-4a95-8156-556c8582849d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]},{"output_type":"execute_result","data":{"text/plain":["        duration protocol_type   service  flag  src_bytes  dst_bytes  land  \\\n","0              0           tcp  ftp_data    SF        491          0     0   \n","1              0           udp     other    SF        146          0     0   \n","2              0           tcp   private    S0          0          0     0   \n","3              0           tcp      http    SF        232       8153     0   \n","4              0           tcp      http    SF        199        420     0   \n","...          ...           ...       ...   ...        ...        ...   ...   \n","137818         0           udp  domain_u    SF         43         43     0   \n","137819         0           tcp      http    SF        336        285     0   \n","137820         1           tcp    telnet  RSTO          0         15     0   \n","137821         0           tcp    sunrpc   REJ          0          0     0   \n","137822         0           udp   private    SF         41          0     0   \n","\n","        wrong_fragment  urgent  hot  ...  dst_host_same_srv_rate  \\\n","0                    0       0    0  ...                    0.17   \n","1                    0       0    0  ...                    0.00   \n","2                    0       0    0  ...                    0.10   \n","3                    0       0    0  ...                    1.00   \n","4                    0       0    0  ...                    1.00   \n","...                ...     ...  ...  ...                     ...   \n","137818               0       0    0  ...                    1.00   \n","137819               0       0    0  ...                    0.92   \n","137820               0       0    0  ...                    0.37   \n","137821               0       0    0  ...                    0.19   \n","137822               0       0    0  ...                    1.00   \n","\n","        dst_host_diff_srv_rate  dst_host_same_src_port_rate  \\\n","0                         0.03                         0.17   \n","1                         0.60                         0.88   \n","2                         0.05                         0.00   \n","3                         0.00                         0.03   \n","4                         0.00                         0.00   \n","...                        ...                          ...   \n","137818                    0.00                         0.01   \n","137819                    0.02                         0.00   \n","137820                    0.03                         0.01   \n","137821                    0.03                         0.01   \n","137822                    0.00                         0.00   \n","\n","        dst_host_srv_diff_host_rate  dst_host_serror_rate  \\\n","0                              0.00                  0.00   \n","1                              0.00                  0.00   \n","2                              0.00                  1.00   \n","3                              0.04                  0.03   \n","4                              0.00                  0.00   \n","...                             ...                   ...   \n","137818                         0.00                  0.00   \n","137819                         0.00                  0.00   \n","137820                         0.02                  0.05   \n","137821                         0.04                  0.00   \n","137822                         0.00                  0.00   \n","\n","        dst_host_srv_serror_rate  dst_host_rerror_rate  \\\n","0                           0.00                  0.05   \n","1                           0.00                  0.00   \n","2                           1.00                  0.00   \n","3                           0.01                  0.00   \n","4                           0.00                  0.00   \n","...                          ...                   ...   \n","137818                      0.00                  0.00   \n","137819                      0.00                  0.05   \n","137820                      0.08                  0.85   \n","137821                      0.00                  0.88   \n","137822                      0.00                  0.00   \n","\n","        dst_host_srv_rerror_rate      label  difficulty  \n","0                           0.00     normal          20  \n","1                           0.00     normal          15  \n","2                           0.00    neptune          19  \n","3                           0.01     normal          21  \n","4                           0.00     normal          21  \n","...                          ...        ...         ...  \n","137818                      0.00     normal          18  \n","137819                      0.00     normal          18  \n","137820                      0.58      mscan          13  \n","137821                      1.00      mscan          15  \n","137822                      0.00  snmpguess          17  \n","\n","[137823 rows x 43 columns]"],"text/html":["\n","  <div id=\"df-3e34c558-7518-4281-84e6-1f6b9f90fca4\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>duration</th>\n","      <th>protocol_type</th>\n","      <th>service</th>\n","      <th>flag</th>\n","      <th>src_bytes</th>\n","      <th>dst_bytes</th>\n","      <th>land</th>\n","      <th>wrong_fragment</th>\n","      <th>urgent</th>\n","      <th>hot</th>\n","      <th>...</th>\n","      <th>dst_host_same_srv_rate</th>\n","      <th>dst_host_diff_srv_rate</th>\n","      <th>dst_host_same_src_port_rate</th>\n","      <th>dst_host_srv_diff_host_rate</th>\n","      <th>dst_host_serror_rate</th>\n","      <th>dst_host_srv_serror_rate</th>\n","      <th>dst_host_rerror_rate</th>\n","      <th>dst_host_srv_rerror_rate</th>\n","      <th>label</th>\n","      <th>difficulty</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>tcp</td>\n","      <td>ftp_data</td>\n","      <td>SF</td>\n","      <td>491</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0.17</td>\n","      <td>0.03</td>\n","      <td>0.17</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.05</td>\n","      <td>0.00</td>\n","      <td>normal</td>\n","      <td>20</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>udp</td>\n","      <td>other</td>\n","      <td>SF</td>\n","      <td>146</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0.00</td>\n","      <td>0.60</td>\n","      <td>0.88</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>normal</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>tcp</td>\n","      <td>private</td>\n","      <td>S0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0.10</td>\n","      <td>0.05</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>1.00</td>\n","      <td>1.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>neptune</td>\n","      <td>19</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>tcp</td>\n","      <td>http</td>\n","      <td>SF</td>\n","      <td>232</td>\n","      <td>8153</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>1.00</td>\n","      <td>0.00</td>\n","      <td>0.03</td>\n","      <td>0.04</td>\n","      <td>0.03</td>\n","      <td>0.01</td>\n","      <td>0.00</td>\n","      <td>0.01</td>\n","      <td>normal</td>\n","      <td>21</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>tcp</td>\n","      <td>http</td>\n","      <td>SF</td>\n","      <td>199</td>\n","      <td>420</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>1.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>normal</td>\n","      <td>21</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>137818</th>\n","      <td>0</td>\n","      <td>udp</td>\n","      <td>domain_u</td>\n","      <td>SF</td>\n","      <td>43</td>\n","      <td>43</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>1.00</td>\n","      <td>0.00</td>\n","      <td>0.01</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>normal</td>\n","      <td>18</td>\n","    </tr>\n","    <tr>\n","      <th>137819</th>\n","      <td>0</td>\n","      <td>tcp</td>\n","      <td>http</td>\n","      <td>SF</td>\n","      <td>336</td>\n","      <td>285</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0.92</td>\n","      <td>0.02</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.05</td>\n","      <td>0.00</td>\n","      <td>normal</td>\n","      <td>18</td>\n","    </tr>\n","    <tr>\n","      <th>137820</th>\n","      <td>1</td>\n","      <td>tcp</td>\n","      <td>telnet</td>\n","      <td>RSTO</td>\n","      <td>0</td>\n","      <td>15</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0.37</td>\n","      <td>0.03</td>\n","      <td>0.01</td>\n","      <td>0.02</td>\n","      <td>0.05</td>\n","      <td>0.08</td>\n","      <td>0.85</td>\n","      <td>0.58</td>\n","      <td>mscan</td>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>137821</th>\n","      <td>0</td>\n","      <td>tcp</td>\n","      <td>sunrpc</td>\n","      <td>REJ</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0.19</td>\n","      <td>0.03</td>\n","      <td>0.01</td>\n","      <td>0.04</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.88</td>\n","      <td>1.00</td>\n","      <td>mscan</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>137822</th>\n","      <td>0</td>\n","      <td>udp</td>\n","      <td>private</td>\n","      <td>SF</td>\n","      <td>41</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>1.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>snmpguess</td>\n","      <td>17</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>137823 rows × 43 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3e34c558-7518-4281-84e6-1f6b9f90fca4')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-3e34c558-7518-4281-84e6-1f6b9f90fca4 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-3e34c558-7518-4281-84e6-1f6b9f90fca4');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":35}],"source":["# importing required libraries\n","import numpy as np\n","import pandas as pd\n","import pickle # saving and loading trained model\n","from os import path\n","# importing required libraries for normalizing data\n","from sklearn import preprocessing\n","from sklearn.preprocessing import StandardScaler\n","# importing library for plotting\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn import metrics\n","from sklearn.metrics import accuracy_score\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report\n","from sklearn.metrics import precision_score\n","from sklearn.metrics import recall_score\n","from sklearn.metrics import f1_score\n","from sklearn.metrics import roc_auc_score\n","from sklearn.metrics import roc_curve, auc\n","import tensorflow as tf\n","from tensorflow.keras.utils import to_categorical\n","from keras.layers import  Reshape , Conv1D, MaxPool1D, Flatten, Dropout, Dense,MaxPooling1D # importing CNN layers\n","from keras.models import Sequential #importing Sequential layer\n","\n","feature=[\"duration\",\"protocol_type\",\"service\",\"flag\",\"src_bytes\",\"dst_bytes\",\"land\",\"wrong_fragment\",\"urgent\",\"hot\",\n","          \"num_failed_logins\",\"logged_in\",\"num_compromised\",\"root_shell\",\"su_attempted\",\"num_root\",\"num_file_creations\",\"num_shells\",\n","          \"num_access_files\",\"num_outbound_cmds\",\"is_host_login\",\"is_guest_login\",\"count\",\"srv_count\",\"serror_rate\",\"srv_serror_rate\",\n","          \"rerror_rate\",\"srv_rerror_rate\",\"same_srv_rate\",\"diff_srv_rate\",\"srv_diff_host_rate\",\"dst_host_count\",\"dst_host_srv_count\",\n","          \"dst_host_same_srv_rate\",\"dst_host_diff_srv_rate\",\"dst_host_same_src_port_rate\",\"dst_host_srv_diff_host_rate\",\"dst_host_serror_rate\",\n","          \"dst_host_srv_serror_rate\",\"dst_host_rerror_rate\",\"dst_host_srv_rerror_rate\",\"label\",\"difficulty\"]\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","train='/content/drive/MyDrive/Colab works/VANET/KDDTrain+.txt'\n","test='/content/drive/MyDrive/Colab works/VANET/KDDTest-21.txt'\n","test21='/content/drive/MyDrive/Colab works/VANET/KDDTest-21.txt'\n","train_data=pd.read_csv(train,names=feature)\n","test_data=pd.read_csv(test,names=feature)\n","test_data21 = pd.read_csv(test21, names= feature)\n","data= pd.concat([train_data, test_data], ignore_index=True)\n","data\n","\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JvbhGdsbxYO0"},"outputs":[],"source":["# number of attack labels\n","data['label'].value_counts()\n","# Redistribute across common attack class\n","def change_label(df):\n","  df.label.replace(['apache2','back','land','neptune','mailbomb','pod','processtable','smurf','teardrop','udpstorm','worm'],'Dos',inplace=True)\n","  df.label.replace(['ftp_write','guess_passwd','httptunnel','imap','multihop','named','phf','sendmail','snmpgetattack','snmpguess','spy','warezclient','warezmaster','xlock','xsnoop'],'R2L',inplace=True)\n","  df.label.replace(['ipsweep','mscan','nmap','portsweep','saint','satan'],'Probe',inplace=True)\n","  df.label.replace(['buffer_overflow','loadmodule','perl','ps','rootkit','sqlattack','xterm'],'U2R',inplace=True)\n","change_label(data)\n","# distribution of attack classes\n","data.label.value_counts()\n","\n","\n","# creating a dataframe with multi-class labels (Dos,Probe,R2L,U2R,normal)\n","label = pd.DataFrame(data.label)\n","\n","# using standard scaler for normalizing\n","std_scaler = StandardScaler()\n","def standardization(df,col):\n","    for i in col:\n","        arr = df[i]\n","        arr = np.array(arr)\n","        df[i] = std_scaler.fit_transform(arr.reshape(len(arr),1))\n","    return df\n","\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KHmoAS9ioKf0","executionInfo":{"status":"ok","timestamp":1676375385504,"user_tz":-300,"elapsed":4390,"user":{"displayName":"Shujaat Ali Shariati","userId":"00539791853302699711"}},"outputId":"a64528d9-4fe5-40d7-c71d-0c8dc4dfbaef"},"outputs":[{"output_type":"stream","name":"stdout","text":["(137823, 44)\n","(137823, 43)\n","(137823, 124)\n","X_data has shape: (137823, 123) \n","y_data has shape: (137823,)\n","[[ 1.58170670e-03 -7.23503810e-05  1.29825661e-04 ...  3.29771584e-04\n","  -1.59423990e-01  9.34784227e-04]\n"," [ 1.06962787e-01  6.79338140e-03  6.90724253e-03 ... -2.62971392e-04\n","  -5.62261777e-02 -2.24682595e-04]\n"," [ 8.16994985e-02  3.55660978e-03  3.25378807e-03 ...  8.96475637e-05\n","   1.88040799e-04  1.88432057e-04]\n"," ...\n"," [ 2.73960441e-01  6.26656397e-02  4.08179323e-02 ...  8.28505670e-04\n","   7.99301778e-02  4.24617824e-03]\n"," [ 5.23774284e-01  2.79791434e-01  1.50444046e-01 ...  1.26964218e-03\n","  -5.67057741e-02 -6.52328404e-04]\n"," [ 3.32662847e-01  1.60305777e-01  8.18016052e-02 ... -6.51797182e-04\n","  -5.38129595e-03  1.49647348e-03]]\n","PC1: dst_host_srv_serror_rate\n","PC2: srv_rerror_rate\n","PC3: num_root\n","PC4: difficulty\n","PC5: srv_count\n","PC6: is_guest_login\n","PC7: num_compromised\n","PC8: dst_host_diff_srv_rate\n","PC9: duration\n","PC10: duration\n","X_train has shape: (110258, 10) \n","y_train has shape: (110258,)\n","(110258, 10) \n"," (27565, 10)\n"]}],"source":["from sklearn.decomposition import PCA\n","\n","numeric_col = data.select_dtypes(include='number').columns\n","data = standardization(data, numeric_col)\n","\n","le2 = preprocessing.LabelEncoder()\n","enc_label = label.apply(le2.fit_transform)\n","data['intrusion'] = enc_label\n","\n","print(data.shape)\n","data.drop(labels= ['label'], axis=1, inplace=True)\n","print(data.shape)\n","\n","data = pd.get_dummies(data, columns=['protocol_type', 'service', 'flag'], prefix=\"\", prefix_sep=\"\")\n","print(data.shape)\n","\n","y_data = data['intrusion']\n","X_data = data.drop(labels=['intrusion'], axis=1)\n","\n","print('X_data has shape:', X_data.shape, '\\ny_data has shape:', y_data.shape)\n","\n","pca = PCA(n_components=10)\n","X_data_pca = pca.fit_transform(X_data)\n","print(pca.components_)\n","col_names = X_data.columns\n","col_names = X_data.columns\n","features = []\n","for i in range(10):\n","    feature_name = \"PC\" + str(i + 1)\n","    feature = col_names[pca.components_[i].argmax()]\n","    features.append(feature)\n","    print(\"{}: {}\".format(feature_name, feature))\n","\n","X_train, X_test, y_train, y_test = train_test_split(X_data_pca, y_data, test_size=0.20, random_state=42)\n","\n","print('X_train has shape:', X_train.shape, '\\ny_train has shape:', y_train.shape)\n","print(X_train.shape, '\\n', X_test.shape)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":4851},"executionInfo":{"elapsed":207557,"status":"ok","timestamp":1676375660803,"user":{"displayName":"Shujaat Ali Shariati","userId":"00539791853302699711"},"user_tz":-300},"id":"vsPSnGLyoF6u","outputId":"eaf65832-6197-4f9e-a36d-cb29c19d5c83"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_9\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," reshape_6 (Reshape)         (None, 10, 1)             0         \n","                                                                 \n"," conv1d_19 (Conv1D)          (None, 8, 64)             256       \n","                                                                 \n"," max_pooling1d_14 (MaxPoolin  (None, 4, 64)            0         \n"," g1D)                                                            \n","                                                                 \n"," conv1d_20 (Conv1D)          (None, 2, 128)            24704     \n","                                                                 \n"," max_pooling1d_15 (MaxPoolin  (None, 1, 128)           0         \n"," g1D)                                                            \n","                                                                 \n"," flatten_5 (Flatten)         (None, 128)               0         \n","                                                                 \n"," dense_12 (Dense)            (None, 50)                6450      \n","                                                                 \n"," dense_13 (Dense)            (None, 5)                 255       \n","                                                                 \n","=================================================================\n","Total params: 31,665\n","Trainable params: 31,665\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/100\n","18/18 [==============================] - 3s 112ms/step - loss: 1.0447 - accuracy: 0.7388 - val_loss: 0.6576 - val_accuracy: 0.8314\n","Epoch 2/100\n","18/18 [==============================] - 2s 92ms/step - loss: 0.4614 - accuracy: 0.8636 - val_loss: 0.3283 - val_accuracy: 0.9049\n","Epoch 3/100\n","18/18 [==============================] - 2s 91ms/step - loss: 0.2842 - accuracy: 0.9159 - val_loss: 0.2543 - val_accuracy: 0.9230\n","Epoch 4/100\n","18/18 [==============================] - 2s 94ms/step - loss: 0.2324 - accuracy: 0.9261 - val_loss: 0.2167 - val_accuracy: 0.9279\n","Epoch 5/100\n","18/18 [==============================] - 2s 91ms/step - loss: 0.2015 - accuracy: 0.9311 - val_loss: 0.1902 - val_accuracy: 0.9340\n","Epoch 6/100\n","18/18 [==============================] - 2s 97ms/step - loss: 0.1791 - accuracy: 0.9390 - val_loss: 0.1710 - val_accuracy: 0.9436\n","Epoch 7/100\n","18/18 [==============================] - 3s 157ms/step - loss: 0.1637 - accuracy: 0.9448 - val_loss: 0.1575 - val_accuracy: 0.9496\n","Epoch 8/100\n","18/18 [==============================] - 2s 90ms/step - loss: 0.1517 - accuracy: 0.9500 - val_loss: 0.1474 - val_accuracy: 0.9501\n","Epoch 9/100\n","18/18 [==============================] - 2s 93ms/step - loss: 0.1423 - accuracy: 0.9540 - val_loss: 0.1458 - val_accuracy: 0.9449\n","Epoch 10/100\n","18/18 [==============================] - 2s 92ms/step - loss: 0.1345 - accuracy: 0.9556 - val_loss: 0.1311 - val_accuracy: 0.9557\n","Epoch 11/100\n","18/18 [==============================] - 2s 91ms/step - loss: 0.1249 - accuracy: 0.9585 - val_loss: 0.1226 - val_accuracy: 0.9625\n","Epoch 12/100\n","18/18 [==============================] - 2s 92ms/step - loss: 0.1199 - accuracy: 0.9604 - val_loss: 0.1165 - val_accuracy: 0.9609\n","Epoch 13/100\n","18/18 [==============================] - 2s 92ms/step - loss: 0.1122 - accuracy: 0.9632 - val_loss: 0.1136 - val_accuracy: 0.9608\n","Epoch 14/100\n","18/18 [==============================] - 3s 152ms/step - loss: 0.1066 - accuracy: 0.9648 - val_loss: 0.1048 - val_accuracy: 0.9651\n","Epoch 15/100\n","18/18 [==============================] - 2s 101ms/step - loss: 0.1021 - accuracy: 0.9659 - val_loss: 0.1031 - val_accuracy: 0.9687\n","Epoch 16/100\n","18/18 [==============================] - 2s 92ms/step - loss: 0.0974 - accuracy: 0.9687 - val_loss: 0.0958 - val_accuracy: 0.9712\n","Epoch 17/100\n","18/18 [==============================] - 2s 91ms/step - loss: 0.0920 - accuracy: 0.9710 - val_loss: 0.0929 - val_accuracy: 0.9722\n","Epoch 18/100\n","18/18 [==============================] - 2s 92ms/step - loss: 0.0970 - accuracy: 0.9687 - val_loss: 0.0964 - val_accuracy: 0.9673\n","Epoch 19/100\n","18/18 [==============================] - 2s 91ms/step - loss: 0.0869 - accuracy: 0.9725 - val_loss: 0.0859 - val_accuracy: 0.9752\n","Epoch 20/100\n","18/18 [==============================] - 2s 91ms/step - loss: 0.0827 - accuracy: 0.9745 - val_loss: 0.0822 - val_accuracy: 0.9741\n","Epoch 21/100\n","18/18 [==============================] - 2s 140ms/step - loss: 0.0791 - accuracy: 0.9757 - val_loss: 0.0797 - val_accuracy: 0.9754\n","Epoch 22/100\n","18/18 [==============================] - 2s 113ms/step - loss: 0.0760 - accuracy: 0.9761 - val_loss: 0.0785 - val_accuracy: 0.9773\n","Epoch 23/100\n","18/18 [==============================] - 2s 94ms/step - loss: 0.0738 - accuracy: 0.9774 - val_loss: 0.0731 - val_accuracy: 0.9787\n","Epoch 24/100\n","18/18 [==============================] - 2s 93ms/step - loss: 0.0712 - accuracy: 0.9780 - val_loss: 0.0743 - val_accuracy: 0.9774\n","Epoch 25/100\n","18/18 [==============================] - 2s 92ms/step - loss: 0.0699 - accuracy: 0.9775 - val_loss: 0.0688 - val_accuracy: 0.9803\n","Epoch 26/100\n","18/18 [==============================] - 2s 93ms/step - loss: 0.0660 - accuracy: 0.9795 - val_loss: 0.0669 - val_accuracy: 0.9807\n","Epoch 27/100\n","18/18 [==============================] - 2s 93ms/step - loss: 0.0635 - accuracy: 0.9814 - val_loss: 0.0648 - val_accuracy: 0.9825\n","Epoch 28/100\n","18/18 [==============================] - 2s 140ms/step - loss: 0.0620 - accuracy: 0.9808 - val_loss: 0.0672 - val_accuracy: 0.9773\n","Epoch 29/100\n","18/18 [==============================] - 2s 116ms/step - loss: 0.0620 - accuracy: 0.9808 - val_loss: 0.0621 - val_accuracy: 0.9831\n","Epoch 30/100\n","18/18 [==============================] - 2s 94ms/step - loss: 0.0620 - accuracy: 0.9798 - val_loss: 0.0620 - val_accuracy: 0.9811\n","Epoch 31/100\n","18/18 [==============================] - 2s 93ms/step - loss: 0.0576 - accuracy: 0.9829 - val_loss: 0.0582 - val_accuracy: 0.9839\n","Epoch 32/100\n","18/18 [==============================] - 2s 93ms/step - loss: 0.0559 - accuracy: 0.9837 - val_loss: 0.0581 - val_accuracy: 0.9838\n","Epoch 33/100\n","18/18 [==============================] - 2s 92ms/step - loss: 0.0536 - accuracy: 0.9845 - val_loss: 0.0568 - val_accuracy: 0.9839\n","Epoch 34/100\n","18/18 [==============================] - 2s 93ms/step - loss: 0.0527 - accuracy: 0.9847 - val_loss: 0.0547 - val_accuracy: 0.9848\n","Epoch 35/100\n","18/18 [==============================] - 2s 136ms/step - loss: 0.0513 - accuracy: 0.9854 - val_loss: 0.0539 - val_accuracy: 0.9836\n","Epoch 36/100\n","18/18 [==============================] - 2s 119ms/step - loss: 0.0507 - accuracy: 0.9849 - val_loss: 0.0528 - val_accuracy: 0.9856\n","Epoch 37/100\n","18/18 [==============================] - 2s 91ms/step - loss: 0.0498 - accuracy: 0.9853 - val_loss: 0.0517 - val_accuracy: 0.9846\n","Epoch 38/100\n","18/18 [==============================] - 2s 91ms/step - loss: 0.0485 - accuracy: 0.9856 - val_loss: 0.0523 - val_accuracy: 0.9849\n","Epoch 39/100\n","18/18 [==============================] - 2s 91ms/step - loss: 0.0473 - accuracy: 0.9862 - val_loss: 0.0505 - val_accuracy: 0.9868\n","Epoch 40/100\n","18/18 [==============================] - 2s 91ms/step - loss: 0.0460 - accuracy: 0.9869 - val_loss: 0.0500 - val_accuracy: 0.9856\n","Epoch 41/100\n","18/18 [==============================] - 2s 92ms/step - loss: 0.0450 - accuracy: 0.9869 - val_loss: 0.0481 - val_accuracy: 0.9864\n","Epoch 42/100\n","18/18 [==============================] - 2s 126ms/step - loss: 0.0448 - accuracy: 0.9868 - val_loss: 0.0482 - val_accuracy: 0.9864\n","Epoch 43/100\n","18/18 [==============================] - 2s 129ms/step - loss: 0.0454 - accuracy: 0.9858 - val_loss: 0.0496 - val_accuracy: 0.9835\n","Epoch 44/100\n","18/18 [==============================] - 2s 92ms/step - loss: 0.0444 - accuracy: 0.9865 - val_loss: 0.0491 - val_accuracy: 0.9855\n","Epoch 45/100\n","18/18 [==============================] - 2s 92ms/step - loss: 0.0426 - accuracy: 0.9872 - val_loss: 0.0457 - val_accuracy: 0.9872\n","Epoch 46/100\n","18/18 [==============================] - 2s 90ms/step - loss: 0.0415 - accuracy: 0.9878 - val_loss: 0.0459 - val_accuracy: 0.9865\n","Epoch 47/100\n","18/18 [==============================] - 2s 93ms/step - loss: 0.0409 - accuracy: 0.9882 - val_loss: 0.0456 - val_accuracy: 0.9872\n","Epoch 48/100\n","18/18 [==============================] - 2s 91ms/step - loss: 0.0407 - accuracy: 0.9881 - val_loss: 0.0476 - val_accuracy: 0.9865\n","Epoch 49/100\n","18/18 [==============================] - 2s 113ms/step - loss: 0.0405 - accuracy: 0.9882 - val_loss: 0.0444 - val_accuracy: 0.9868\n","Epoch 50/100\n","18/18 [==============================] - 3s 140ms/step - loss: 0.0392 - accuracy: 0.9882 - val_loss: 0.0446 - val_accuracy: 0.9872\n","Epoch 51/100\n","18/18 [==============================] - 2s 92ms/step - loss: 0.0390 - accuracy: 0.9881 - val_loss: 0.0442 - val_accuracy: 0.9872\n","Epoch 52/100\n","18/18 [==============================] - 2s 90ms/step - loss: 0.0401 - accuracy: 0.9874 - val_loss: 0.0440 - val_accuracy: 0.9870\n","Epoch 53/100\n","18/18 [==============================] - 2s 92ms/step - loss: 0.0385 - accuracy: 0.9883 - val_loss: 0.0454 - val_accuracy: 0.9856\n","Epoch 54/100\n","18/18 [==============================] - 2s 92ms/step - loss: 0.0384 - accuracy: 0.9881 - val_loss: 0.0447 - val_accuracy: 0.9875\n","Epoch 55/100\n","18/18 [==============================] - 2s 94ms/step - loss: 0.0377 - accuracy: 0.9886 - val_loss: 0.0419 - val_accuracy: 0.9877\n","Epoch 56/100\n","18/18 [==============================] - 2s 101ms/step - loss: 0.0370 - accuracy: 0.9885 - val_loss: 0.0432 - val_accuracy: 0.9859\n","Epoch 57/100\n","18/18 [==============================] - 3s 152ms/step - loss: 0.0379 - accuracy: 0.9877 - val_loss: 0.0446 - val_accuracy: 0.9855\n","Epoch 58/100\n","18/18 [==============================] - 2s 92ms/step - loss: 0.0428 - accuracy: 0.9855 - val_loss: 0.0574 - val_accuracy: 0.9809\n","Epoch 59/100\n","18/18 [==============================] - 2s 92ms/step - loss: 0.0451 - accuracy: 0.9855 - val_loss: 0.0427 - val_accuracy: 0.9873\n","Epoch 60/100\n","18/18 [==============================] - 2s 92ms/step - loss: 0.0385 - accuracy: 0.9876 - val_loss: 0.0405 - val_accuracy: 0.9887\n","Epoch 61/100\n","18/18 [==============================] - 2s 93ms/step - loss: 0.0370 - accuracy: 0.9882 - val_loss: 0.0401 - val_accuracy: 0.9878\n","Epoch 62/100\n","18/18 [==============================] - 2s 93ms/step - loss: 0.0349 - accuracy: 0.9891 - val_loss: 0.0396 - val_accuracy: 0.9885\n","Epoch 63/100\n","18/18 [==============================] - 2s 97ms/step - loss: 0.0333 - accuracy: 0.9895 - val_loss: 0.0379 - val_accuracy: 0.9886\n","Epoch 64/100\n","18/18 [==============================] - 3s 155ms/step - loss: 0.0327 - accuracy: 0.9900 - val_loss: 0.0389 - val_accuracy: 0.9891\n","Epoch 65/100\n","18/18 [==============================] - 2s 92ms/step - loss: 0.0332 - accuracy: 0.9898 - val_loss: 0.0388 - val_accuracy: 0.9884\n","Epoch 66/100\n","18/18 [==============================] - 2s 93ms/step - loss: 0.0336 - accuracy: 0.9894 - val_loss: 0.0408 - val_accuracy: 0.9878\n","Epoch 67/100\n","18/18 [==============================] - 2s 95ms/step - loss: 0.0331 - accuracy: 0.9899 - val_loss: 0.0421 - val_accuracy: 0.9852\n","Epoch 68/100\n","18/18 [==============================] - 2s 93ms/step - loss: 0.0335 - accuracy: 0.9892 - val_loss: 0.0390 - val_accuracy: 0.9879\n","Epoch 69/100\n","18/18 [==============================] - 2s 94ms/step - loss: 0.0321 - accuracy: 0.9898 - val_loss: 0.0369 - val_accuracy: 0.9885\n","Epoch 70/100\n","18/18 [==============================] - 2s 99ms/step - loss: 0.0316 - accuracy: 0.9903 - val_loss: 0.0376 - val_accuracy: 0.9890\n","Epoch 71/100\n","18/18 [==============================] - 3s 154ms/step - loss: 0.0318 - accuracy: 0.9900 - val_loss: 0.0366 - val_accuracy: 0.9891\n","Epoch 72/100\n","18/18 [==============================] - 2s 95ms/step - loss: 0.0318 - accuracy: 0.9903 - val_loss: 0.0382 - val_accuracy: 0.9880\n","Epoch 73/100\n","18/18 [==============================] - 2s 93ms/step - loss: 0.0312 - accuracy: 0.9896 - val_loss: 0.0384 - val_accuracy: 0.9889\n","Epoch 74/100\n","18/18 [==============================] - 2s 93ms/step - loss: 0.0305 - accuracy: 0.9904 - val_loss: 0.0367 - val_accuracy: 0.9895\n","Epoch 75/100\n","18/18 [==============================] - 2s 94ms/step - loss: 0.0306 - accuracy: 0.9902 - val_loss: 0.0366 - val_accuracy: 0.9895\n","Epoch 76/100\n","18/18 [==============================] - 2s 92ms/step - loss: 0.0299 - accuracy: 0.9904 - val_loss: 0.0356 - val_accuracy: 0.9893\n","Epoch 77/100\n","18/18 [==============================] - 2s 94ms/step - loss: 0.0294 - accuracy: 0.9906 - val_loss: 0.0348 - val_accuracy: 0.9900\n","Epoch 78/100\n","18/18 [==============================] - 3s 158ms/step - loss: 0.0295 - accuracy: 0.9906 - val_loss: 0.0368 - val_accuracy: 0.9897\n","Epoch 79/100\n","18/18 [==============================] - 2s 105ms/step - loss: 0.0295 - accuracy: 0.9908 - val_loss: 0.0341 - val_accuracy: 0.9899\n","Epoch 80/100\n","18/18 [==============================] - 2s 96ms/step - loss: 0.0291 - accuracy: 0.9910 - val_loss: 0.0347 - val_accuracy: 0.9891\n","Epoch 81/100\n","18/18 [==============================] - 2s 94ms/step - loss: 0.0293 - accuracy: 0.9905 - val_loss: 0.0402 - val_accuracy: 0.9881\n","Epoch 82/100\n","18/18 [==============================] - 2s 94ms/step - loss: 0.0308 - accuracy: 0.9899 - val_loss: 0.0350 - val_accuracy: 0.9892\n","Epoch 83/100\n","18/18 [==============================] - 2s 95ms/step - loss: 0.0293 - accuracy: 0.9904 - val_loss: 0.0355 - val_accuracy: 0.9892\n","Epoch 84/100\n","18/18 [==============================] - 2s 95ms/step - loss: 0.0283 - accuracy: 0.9910 - val_loss: 0.0354 - val_accuracy: 0.9888\n","Epoch 85/100\n","18/18 [==============================] - 3s 155ms/step - loss: 0.0286 - accuracy: 0.9909 - val_loss: 0.0404 - val_accuracy: 0.9883\n","Epoch 86/100\n","18/18 [==============================] - 2s 104ms/step - loss: 0.0300 - accuracy: 0.9905 - val_loss: 0.0401 - val_accuracy: 0.9881\n","Epoch 87/100\n","18/18 [==============================] - 2s 94ms/step - loss: 0.0299 - accuracy: 0.9906 - val_loss: 0.0360 - val_accuracy: 0.9890\n","Epoch 88/100\n","18/18 [==============================] - 2s 94ms/step - loss: 0.0279 - accuracy: 0.9912 - val_loss: 0.0356 - val_accuracy: 0.9898\n","Epoch 89/100\n","18/18 [==============================] - 2s 94ms/step - loss: 0.0281 - accuracy: 0.9910 - val_loss: 0.0337 - val_accuracy: 0.9898\n","Epoch 90/100\n","18/18 [==============================] - 2s 95ms/step - loss: 0.0272 - accuracy: 0.9914 - val_loss: 0.0340 - val_accuracy: 0.9902\n","Epoch 91/100\n","18/18 [==============================] - 2s 95ms/step - loss: 0.0267 - accuracy: 0.9915 - val_loss: 0.0341 - val_accuracy: 0.9902\n","Epoch 92/100\n","18/18 [==============================] - 3s 167ms/step - loss: 0.0270 - accuracy: 0.9913 - val_loss: 0.0345 - val_accuracy: 0.9899\n","Epoch 93/100\n","18/18 [==============================] - 2s 95ms/step - loss: 0.0275 - accuracy: 0.9912 - val_loss: 0.0325 - val_accuracy: 0.9900\n","Epoch 94/100\n","18/18 [==============================] - 2s 94ms/step - loss: 0.0276 - accuracy: 0.9909 - val_loss: 0.0351 - val_accuracy: 0.9902\n","Epoch 95/100\n","18/18 [==============================] - 2s 96ms/step - loss: 0.0262 - accuracy: 0.9917 - val_loss: 0.0326 - val_accuracy: 0.9898\n","Epoch 96/100\n","18/18 [==============================] - 2s 94ms/step - loss: 0.0265 - accuracy: 0.9914 - val_loss: 0.0334 - val_accuracy: 0.9901\n","Epoch 97/100\n","18/18 [==============================] - 2s 93ms/step - loss: 0.0259 - accuracy: 0.9918 - val_loss: 0.0315 - val_accuracy: 0.9901\n","Epoch 98/100\n","18/18 [==============================] - 2s 100ms/step - loss: 0.0259 - accuracy: 0.9916 - val_loss: 0.0329 - val_accuracy: 0.9898\n","Epoch 99/100\n","18/18 [==============================] - 3s 156ms/step - loss: 0.0259 - accuracy: 0.9917 - val_loss: 0.0369 - val_accuracy: 0.9884\n","Epoch 100/100\n","18/18 [==============================] - 2s 92ms/step - loss: 0.0272 - accuracy: 0.9908 - val_loss: 0.0326 - val_accuracy: 0.9893\n","862/862 [==============================] - 2s 2ms/step - loss: 0.0347 - accuracy: 0.9905\n","Test results - Loss: 0.03469855338335037 - Accuracy: 99.05314445495605%\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["from keras.utils import to_categorical\n","y_train = to_categorical(y_train, num_classes=5)\n","y_test = to_categorical(y_test, num_classes=5)\n","\n","model = Sequential() # initializing model\n","model.add(Reshape((X_train.shape[1], 1), input_shape=(X_train.shape[1],)))\n","model.add(Conv1D(64, 3, activation='relu'))\n","model.add(MaxPooling1D(2))\n","model.add(Conv1D(128, 3, activation='relu'))\n","model.add(MaxPooling1D(2))\n","model.add(Flatten())\n","model.add(Dense(units=50))\n","\n","# output layer with softmax activation\n","model.add(Dense(units=5, activation='softmax'))\n","# defining loss function, optimizer, metrics and then compiling model\n","model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","# summary of model layers\n","model.summary()\n","\n","# training the model on training dataset\n","history = model.fit(X_train, y_train, epochs=100, batch_size=5000, validation_split=0.2)\n","\n","# predicting target attribute on testing dataset\n","test_results = model.evaluate(X_test, y_test, verbose=1)\n","print(f'Test results - Loss: {test_results[0]} - Accuracy: {test_results[1]*100}%')\n","\n","# Plot of accuracy vs epoch for train and test dataset\n","plt.plot(history.history['accuracy'])\n","plt.plot(history.history['val_accuracy'])\n","plt.title(\"Plot of accuracy vs epoch for train and test dataset\")\n","plt.ylabel('accuracy')\n","plt.xlabel('epoch')\n","plt.show()\n"," # Plot of loss vs epoch for train and test dataset\n","plt.plot(history.history['loss'])\n","plt.plot(history.history['val_loss'])\n","plt.title(\"Plot of loss vs epoch for train and test dataset\")\n","plt.ylabel('loss')\n","plt.xlabel('epoch')\n","plt.legend(['train', 'test'], loc='upper right')\n","plt.show()\n","\n","import matplotlib.pyplot as plt\n","\n","# count the number of samples for each attack class\n","attack_classes = label['label'].value_counts()\n","\n","# plot a bar plot of attack classes\n","attack_classes.plot(kind=\"bar\", color=\"blue\")\n","plt.title(\"Attack Classes\")\n","plt.xlabel(\"Class\")\n","plt.ylabel(\"Count\")\n","plt.show()\n"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":246},"executionInfo":{"elapsed":1893,"status":"error","timestamp":1689956999841,"user":{"displayName":"Shujaat Ali Shariati","userId":"00539791853302699711"},"user_tz":-300},"id":"1IYEPLkTs5xP","outputId":"87bb004e-b54b-45c0-a55f-409ad419e5e4"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-7e3bb05e3cf5>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mconfusion_matrix\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccuracy_score\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf1_score\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# make predictions on test data using your trained model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mpredictions\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;31m# convert predictions to binary class labels\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mpredictions\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mp\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mp\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpredictions\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'model' is not defined"]}],"source":["import seaborn as sns\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import confusion_matrix, accuracy_score, f1_score\n","# make predictions on test data using your trained model\n","predictions = model.predict(X_test)\n","# convert predictions to binary class labels\n","predictions = [np.argmax(p) for p in predictions]\n","# convert y_test to binary class labels\n","y_test = [np.argmax(y) for y in y_test]\n","# calculate accuracy score\n","acc = accuracy_score(y_test, predictions)\n","# calculate F1 score\n","f1 = f1_score(y_test, predictions, average='weighted')\n","print(f1)\n","# calculate confusion matrix\n","cm = confusion_matrix(y_test, predictions)\n","# plot the confusion matrix as a heatmap\n","sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"YlGnBu\")\n","plt.title(\"Confusion Matrix\")\n","plt.xlabel(\"Predicted Class\")\n","plt.ylabel(\"True Class\")\n","plt.show()"]}],"metadata":{"colab":{"provenance":[{"file_id":"19WWkN5Gupr2NaDPPvKkjybrF9KJGjdFw","timestamp":1676302751020},{"file_id":"1JXvTq2H_YgEUZwbZOkY9jgGKMsD4B2ET","timestamp":1676279094535},{"file_id":"1QbmNj_7bdULEL2YzuRxw2DKpzgLHXQPh","timestamp":1676191560750},{"file_id":"1s6KWhUz9NyQzhR1yb3do23C19UD64s-U","timestamp":1675617372948}]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.4"}},"nbformat":4,"nbformat_minor":0}